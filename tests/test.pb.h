// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/service.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_test_2eproto;
namespace fixbug {
class CalcRequest;
struct CalcRequestDefaultTypeInternal;
extern CalcRequestDefaultTypeInternal _CalcRequest_default_instance_;
class CalcResponse;
struct CalcResponseDefaultTypeInternal;
extern CalcResponseDefaultTypeInternal _CalcResponse_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_QunzuEntry_DoNotUse;
struct Response_QunzuEntry_DoNotUseDefaultTypeInternal;
extern Response_QunzuEntry_DoNotUseDefaultTypeInternal _Response_QunzuEntry_DoNotUse_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
}  // namespace fixbug
PROTOBUF_NAMESPACE_OPEN
template <>
::fixbug::CalcRequest* Arena::CreateMaybeMessage<::fixbug::CalcRequest>(Arena*);
template <>
::fixbug::CalcResponse* Arena::CreateMaybeMessage<::fixbug::CalcResponse>(Arena*);
template <>
::fixbug::Error* Arena::CreateMaybeMessage<::fixbug::Error>(Arena*);
template <>
::fixbug::Request* Arena::CreateMaybeMessage<::fixbug::Request>(Arena*);
template <>
::fixbug::Response* Arena::CreateMaybeMessage<::fixbug::Response>(Arena*);
template <>
::fixbug::Response_QunzuEntry_DoNotUse* Arena::CreateMaybeMessage<::fixbug::Response_QunzuEntry_DoNotUse>(Arena*);
template <>
::fixbug::Result* Arena::CreateMaybeMessage<::fixbug::Result>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace fixbug {
enum Error_ErrorCode : int {
  Error_ErrorCode_ERROR = 0,
  Error_ErrorCode_OK = 1,
  Error_ErrorCode_Error_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Error_ErrorCode_Error_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Error_ErrorCode_IsValid(int value);
constexpr Error_ErrorCode Error_ErrorCode_ErrorCode_MIN = static_cast<Error_ErrorCode>(0);
constexpr Error_ErrorCode Error_ErrorCode_ErrorCode_MAX = static_cast<Error_ErrorCode>(1);
constexpr int Error_ErrorCode_ErrorCode_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Error_ErrorCode_descriptor();
template <typename T>
const std::string& Error_ErrorCode_Name(T value) {
  static_assert(std::is_same<T, Error_ErrorCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorCode_Name().");
  return Error_ErrorCode_Name(static_cast<Error_ErrorCode>(value));
}
template <>
inline const std::string& Error_ErrorCode_Name(Error_ErrorCode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Error_ErrorCode_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Error_ErrorCode_Parse(absl::string_view name, Error_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error_ErrorCode>(
      Error_ErrorCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fixbug.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
    kAddrFieldNumber = 3,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string pwd = 2;
  void clear_pwd() ;
  const std::string& pwd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pwd(Arg_&& arg, Args_... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* ptr);

  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(
      const std::string& value);
  std::string* _internal_mutable_pwd();

  public:
  // bytes addr = 3;
  void clear_addr() ;
  const std::string& addr() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_addr(Arg_&& arg, Args_... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* ptr);

  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(
      const std::string& value);
  std::string* _internal_mutable_addr();

  public:
  // @@protoc_insertion_point(class_scope:fixbug.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit PROTOBUF_CONSTEXPR Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Error& from) {
    Error::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fixbug.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ErrorCode = Error_ErrorCode;
  static constexpr ErrorCode ERROR = Error_ErrorCode_ERROR;
  static constexpr ErrorCode OK = Error_ErrorCode_OK;
  static inline bool ErrorCode_IsValid(int value) {
    return Error_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN = Error_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX = Error_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE = Error_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
    return Error_ErrorCode_descriptor();
  }
  template <typename T>
  static inline const std::string& ErrorCode_Name(T value) {
    return Error_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(absl::string_view name, ErrorCode* value) {
    return Error_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResonFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string reson = 2;
  void clear_reson() ;
  const std::string& reson() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reson(Arg_&& arg, Args_... args);
  std::string* mutable_reson();
  PROTOBUF_NODISCARD std::string* release_reson();
  void set_allocated_reson(std::string* ptr);

  private:
  const std::string& _internal_reson() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reson(
      const std::string& value);
  std::string* _internal_mutable_reson();

  public:
  // .fixbug.Error.ErrorCode code = 1;
  void clear_code() ;
  ::fixbug::Error_ErrorCode code() const;
  void set_code(::fixbug::Error_ErrorCode value);

  private:
  ::fixbug::Error_ErrorCode _internal_code() const;
  void _internal_set_code(::fixbug::Error_ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:fixbug.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reson_;
    int code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};// -------------------------------------------------------------------

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit PROTOBUF_CONSTEXPR Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Result& from) {
    Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fixbug.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fixbug.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};// -------------------------------------------------------------------

class Response_QunzuEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_QunzuEntry_DoNotUse, 
    ::int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Response_QunzuEntry_DoNotUse, 
    ::int32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Response_QunzuEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Response_QunzuEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Response_QunzuEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Response_QunzuEntry_DoNotUse& other);
  static const Response_QunzuEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Response_QunzuEntry_DoNotUse*>(&_Response_QunzuEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "fixbug.Response.QunzuEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fixbug.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kQunzuFieldNumber = 4,
    kResFieldNumber = 5,
    kPwdFieldNumber = 2,
    kErrFieldNumber = 1,
    kIsOnlineFieldNumber = 3,
  };
  // map<int32, string> qunzu = 4;
  int qunzu_size() const;
  private:
  int _internal_qunzu_size() const;

  public:
  void clear_qunzu() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, std::string >&
      _internal_qunzu() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, std::string >*
      _internal_mutable_qunzu();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, std::string >&
      qunzu() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, std::string >*
      mutable_qunzu();
  // repeated .fixbug.Result res = 5;
  int res_size() const;
  private:
  int _internal_res_size() const;

  public:
  void clear_res() ;
  ::fixbug::Result* mutable_res(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::Result >*
      mutable_res();
  private:
  const ::fixbug::Result& _internal_res(int index) const;
  ::fixbug::Result* _internal_add_res();
  public:
  const ::fixbug::Result& res(int index) const;
  ::fixbug::Result* add_res();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::Result >&
      res() const;
  // string pwd = 2;
  void clear_pwd() ;
  const std::string& pwd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pwd(Arg_&& arg, Args_... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* ptr);

  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(
      const std::string& value);
  std::string* _internal_mutable_pwd();

  public:
  // .fixbug.Error err = 1;
  bool has_err() const;
  private:
  bool _internal_has_err() const;

  public:
  void clear_err() ;
  const ::fixbug::Error& err() const;
  PROTOBUF_NODISCARD ::fixbug::Error* release_err();
  ::fixbug::Error* mutable_err();
  void set_allocated_err(::fixbug::Error* err);
  private:
  const ::fixbug::Error& _internal_err() const;
  ::fixbug::Error* _internal_mutable_err();
  public:
  void unsafe_arena_set_allocated_err(
      ::fixbug::Error* err);
  ::fixbug::Error* unsafe_arena_release_err();
  // bool is_online = 3;
  void clear_is_online() ;
  bool is_online() const;
  void set_is_online(bool value);

  private:
  bool _internal_is_online() const;
  void _internal_set_is_online(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fixbug.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Response_QunzuEntry_DoNotUse,
        ::int32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> qunzu_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::Result > res_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
    ::fixbug::Error* err_;
    bool is_online_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};// -------------------------------------------------------------------

class CalcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.CalcRequest) */ {
 public:
  inline CalcRequest() : CalcRequest(nullptr) {}
  ~CalcRequest() override;
  explicit PROTOBUF_CONSTEXPR CalcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalcRequest(const CalcRequest& from);
  CalcRequest(CalcRequest&& from) noexcept
    : CalcRequest() {
    *this = ::std::move(from);
  }

  inline CalcRequest& operator=(const CalcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalcRequest& operator=(CalcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalcRequest* internal_default_instance() {
    return reinterpret_cast<const CalcRequest*>(
               &_CalcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CalcRequest& a, CalcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalcRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalcRequest& from) {
    CalcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fixbug.CalcRequest";
  }
  protected:
  explicit CalcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // int32 a = 1;
  void clear_a() ;
  ::int32_t a() const;
  void set_a(::int32_t value);

  private:
  ::int32_t _internal_a() const;
  void _internal_set_a(::int32_t value);

  public:
  // int32 b = 2;
  void clear_b() ;
  ::int32_t b() const;
  void set_b(::int32_t value);

  private:
  ::int32_t _internal_b() const;
  void _internal_set_b(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fixbug.CalcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t a_;
    ::int32_t b_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};// -------------------------------------------------------------------

class CalcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fixbug.CalcResponse) */ {
 public:
  inline CalcResponse() : CalcResponse(nullptr) {}
  ~CalcResponse() override;
  explicit PROTOBUF_CONSTEXPR CalcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalcResponse(const CalcResponse& from);
  CalcResponse(CalcResponse&& from) noexcept
    : CalcResponse() {
    *this = ::std::move(from);
  }

  inline CalcResponse& operator=(const CalcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalcResponse& operator=(CalcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalcResponse* internal_default_instance() {
    return reinterpret_cast<const CalcResponse*>(
               &_CalcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CalcResponse& a, CalcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalcResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalcResponse& from) {
    CalcResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "fixbug.CalcResponse";
  }
  protected:
  explicit CalcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
  };
  // int32 res = 1;
  void clear_res() ;
  ::int32_t res() const;
  void set_res(::int32_t value);

  private:
  ::int32_t _internal_res() const;
  void _internal_set_res(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fixbug.CalcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t res_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};

// ===================================================================


// -------------------------------------------------------------------

class CalcServiceRpc_Stub;
class CalcServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  CalcServiceRpc() = default;

 public:
  using Stub = CalcServiceRpc_Stub;

  CalcServiceRpc(const CalcServiceRpc&) = delete;
  CalcServiceRpc& operator=(const CalcServiceRpc&) = delete;
  virtual ~CalcServiceRpc() = default;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::fixbug::CalcRequest* request,
                        ::fixbug::CalcResponse* response,
                        ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------
  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor() override;

  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done) override;

  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
      const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const override;

  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
      const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const override;
};

class CalcServiceRpc_Stub final : public CalcServiceRpc {
 public:
  CalcServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CalcServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);

  CalcServiceRpc_Stub(const CalcServiceRpc_Stub&) = delete;
  CalcServiceRpc_Stub& operator=(const CalcServiceRpc_Stub&) = delete;

  ~CalcServiceRpc_Stub() override;

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CalcServiceRpc ------------------------------------------
  void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                        const ::fixbug::CalcRequest* request,
                        ::fixbug::CalcResponse* response,
                        ::google::protobuf::Closure* done) override;

 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
};
// ===================================================================



// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Request

// string name = 1;
inline void Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Request::name() const {
  // @@protoc_insertion_point(field_get:fixbug.Request.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fixbug.Request.name)
}
inline std::string* Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:fixbug.Request.name)
  return _s;
}
inline const std::string& Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Request::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Request::release_name() {
  // @@protoc_insertion_point(field_release:fixbug.Request.name)
  return _impl_.name_.Release();
}
inline void Request::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fixbug.Request.name)
}

// string pwd = 2;
inline void Request::clear_pwd() {
  _impl_.pwd_.ClearToEmpty();
}
inline const std::string& Request::pwd() const {
  // @@protoc_insertion_point(field_get:fixbug.Request.pwd)
  return _internal_pwd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_pwd(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.pwd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fixbug.Request.pwd)
}
inline std::string* Request::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:fixbug.Request.pwd)
  return _s;
}
inline const std::string& Request::_internal_pwd() const {
  return _impl_.pwd_.Get();
}
inline void Request::_internal_set_pwd(const std::string& value) {
  ;


  _impl_.pwd_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_pwd() {
  ;
  return _impl_.pwd_.Mutable( GetArenaForAllocation());
}
inline std::string* Request::release_pwd() {
  // @@protoc_insertion_point(field_release:fixbug.Request.pwd)
  return _impl_.pwd_.Release();
}
inline void Request::set_allocated_pwd(std::string* value) {
  _impl_.pwd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pwd_.IsDefault()) {
          _impl_.pwd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fixbug.Request.pwd)
}

// bytes addr = 3;
inline void Request::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& Request::addr() const {
  // @@protoc_insertion_point(field_get:fixbug.Request.addr)
  return _internal_addr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_addr(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.addr_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fixbug.Request.addr)
}
inline std::string* Request::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:fixbug.Request.addr)
  return _s;
}
inline const std::string& Request::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void Request::_internal_set_addr(const std::string& value) {
  ;


  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_addr() {
  ;
  return _impl_.addr_.Mutable( GetArenaForAllocation());
}
inline std::string* Request::release_addr() {
  // @@protoc_insertion_point(field_release:fixbug.Request.addr)
  return _impl_.addr_.Release();
}
inline void Request::set_allocated_addr(std::string* value) {
  _impl_.addr_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.addr_.IsDefault()) {
          _impl_.addr_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fixbug.Request.addr)
}

// -------------------------------------------------------------------

// Error

// .fixbug.Error.ErrorCode code = 1;
inline void Error::clear_code() {
  _impl_.code_ = 0;
}
inline ::fixbug::Error_ErrorCode Error::code() const {
  // @@protoc_insertion_point(field_get:fixbug.Error.code)
  return _internal_code();
}
inline void Error::set_code(::fixbug::Error_ErrorCode value) {
   _internal_set_code(value);
  // @@protoc_insertion_point(field_set:fixbug.Error.code)
}
inline ::fixbug::Error_ErrorCode Error::_internal_code() const {
  return static_cast<::fixbug::Error_ErrorCode>(_impl_.code_);
}
inline void Error::_internal_set_code(::fixbug::Error_ErrorCode value) {
  ;
  _impl_.code_ = value;
}

// string reson = 2;
inline void Error::clear_reson() {
  _impl_.reson_.ClearToEmpty();
}
inline const std::string& Error::reson() const {
  // @@protoc_insertion_point(field_get:fixbug.Error.reson)
  return _internal_reson();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Error::set_reson(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.reson_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fixbug.Error.reson)
}
inline std::string* Error::mutable_reson() {
  std::string* _s = _internal_mutable_reson();
  // @@protoc_insertion_point(field_mutable:fixbug.Error.reson)
  return _s;
}
inline const std::string& Error::_internal_reson() const {
  return _impl_.reson_.Get();
}
inline void Error::_internal_set_reson(const std::string& value) {
  ;


  _impl_.reson_.Set(value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_reson() {
  ;
  return _impl_.reson_.Mutable( GetArenaForAllocation());
}
inline std::string* Error::release_reson() {
  // @@protoc_insertion_point(field_release:fixbug.Error.reson)
  return _impl_.reson_.Release();
}
inline void Error::set_allocated_reson(std::string* value) {
  _impl_.reson_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reson_.IsDefault()) {
          _impl_.reson_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fixbug.Error.reson)
}

// -------------------------------------------------------------------

// Result

// int32 id = 1;
inline void Result::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Result::id() const {
  // @@protoc_insertion_point(field_get:fixbug.Result.id)
  return _internal_id();
}
inline void Result::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:fixbug.Result.id)
}
inline ::int32_t Result::_internal_id() const {
  return _impl_.id_;
}
inline void Result::_internal_set_id(::int32_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Response

// .fixbug.Error err = 1;
inline bool Response::_internal_has_err() const {
  return this != internal_default_instance() && _impl_.err_ != nullptr;
}
inline bool Response::has_err() const {
  return _internal_has_err();
}
inline void Response::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
inline const ::fixbug::Error& Response::_internal_err() const {
  const ::fixbug::Error* p = _impl_.err_;
  return p != nullptr ? *p : reinterpret_cast<const ::fixbug::Error&>(
      ::fixbug::_Error_default_instance_);
}
inline const ::fixbug::Error& Response::err() const {
  // @@protoc_insertion_point(field_get:fixbug.Response.err)
  return _internal_err();
}
inline void Response::unsafe_arena_set_allocated_err(
    ::fixbug::Error* err) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.err_);
  }
  _impl_.err_ = err;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fixbug.Response.err)
}
inline ::fixbug::Error* Response::release_err() {
  
  ::fixbug::Error* temp = _impl_.err_;
  _impl_.err_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::fixbug::Error* Response::unsafe_arena_release_err() {
  // @@protoc_insertion_point(field_release:fixbug.Response.err)
  
  ::fixbug::Error* temp = _impl_.err_;
  _impl_.err_ = nullptr;
  return temp;
}
inline ::fixbug::Error* Response::_internal_mutable_err() {
  
  if (_impl_.err_ == nullptr) {
    auto* p = CreateMaybeMessage<::fixbug::Error>(GetArenaForAllocation());
    _impl_.err_ = p;
  }
  return _impl_.err_;
}
inline ::fixbug::Error* Response::mutable_err() {
  ::fixbug::Error* _msg = _internal_mutable_err();
  // @@protoc_insertion_point(field_mutable:fixbug.Response.err)
  return _msg;
}
inline void Response::set_allocated_err(::fixbug::Error* err) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.err_;
  }
  if (err) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(err);
    if (message_arena != submessage_arena) {
      err = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, err, submessage_arena);
    }

  } else {

  }
  _impl_.err_ = err;
  // @@protoc_insertion_point(field_set_allocated:fixbug.Response.err)
}

// string pwd = 2;
inline void Response::clear_pwd() {
  _impl_.pwd_.ClearToEmpty();
}
inline const std::string& Response::pwd() const {
  // @@protoc_insertion_point(field_get:fixbug.Response.pwd)
  return _internal_pwd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Response::set_pwd(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.pwd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:fixbug.Response.pwd)
}
inline std::string* Response::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:fixbug.Response.pwd)
  return _s;
}
inline const std::string& Response::_internal_pwd() const {
  return _impl_.pwd_.Get();
}
inline void Response::_internal_set_pwd(const std::string& value) {
  ;


  _impl_.pwd_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_pwd() {
  ;
  return _impl_.pwd_.Mutable( GetArenaForAllocation());
}
inline std::string* Response::release_pwd() {
  // @@protoc_insertion_point(field_release:fixbug.Response.pwd)
  return _impl_.pwd_.Release();
}
inline void Response::set_allocated_pwd(std::string* value) {
  _impl_.pwd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pwd_.IsDefault()) {
          _impl_.pwd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fixbug.Response.pwd)
}

// bool is_online = 3;
inline void Response::clear_is_online() {
  _impl_.is_online_ = false;
}
inline bool Response::is_online() const {
  // @@protoc_insertion_point(field_get:fixbug.Response.is_online)
  return _internal_is_online();
}
inline void Response::set_is_online(bool value) {
  _internal_set_is_online(value);
  // @@protoc_insertion_point(field_set:fixbug.Response.is_online)
}
inline bool Response::_internal_is_online() const {
  return _impl_.is_online_;
}
inline void Response::_internal_set_is_online(bool value) {
  ;
  _impl_.is_online_ = value;
}

// map<int32, string> qunzu = 4;
inline int Response::_internal_qunzu_size() const {
  return _impl_.qunzu_.size();
}
inline int Response::qunzu_size() const {
  return _internal_qunzu_size();
}
inline void Response::clear_qunzu() {
  _impl_.qunzu_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, std::string >&
Response::_internal_qunzu() const {
  return _impl_.qunzu_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, std::string >&
Response::qunzu() const {
  // @@protoc_insertion_point(field_map:fixbug.Response.qunzu)
  return _internal_qunzu();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, std::string >*
Response::_internal_mutable_qunzu() {
  return _impl_.qunzu_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::int32_t, std::string >*
Response::mutable_qunzu() {
  // @@protoc_insertion_point(field_mutable_map:fixbug.Response.qunzu)
  return _internal_mutable_qunzu();
}

// repeated .fixbug.Result res = 5;
inline int Response::_internal_res_size() const {
  return _impl_.res_.size();
}
inline int Response::res_size() const {
  return _internal_res_size();
}
inline void Response::clear_res() {
  _impl_.res_.Clear();
}
inline ::fixbug::Result* Response::mutable_res(int index) {
  // @@protoc_insertion_point(field_mutable:fixbug.Response.res)
  return _impl_.res_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::Result >*
Response::mutable_res() {
  // @@protoc_insertion_point(field_mutable_list:fixbug.Response.res)
  return &_impl_.res_;
}
inline const ::fixbug::Result& Response::_internal_res(int index) const {
  return _impl_.res_.Get(index);
}
inline const ::fixbug::Result& Response::res(int index) const {
  // @@protoc_insertion_point(field_get:fixbug.Response.res)
  return _internal_res(index);
}
inline ::fixbug::Result* Response::_internal_add_res() {
  return _impl_.res_.Add();
}
inline ::fixbug::Result* Response::add_res() {
  ::fixbug::Result* _add = _internal_add_res();
  // @@protoc_insertion_point(field_add:fixbug.Response.res)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fixbug::Result >&
Response::res() const {
  // @@protoc_insertion_point(field_list:fixbug.Response.res)
  return _impl_.res_;
}

// -------------------------------------------------------------------

// CalcRequest

// int32 a = 1;
inline void CalcRequest::clear_a() {
  _impl_.a_ = 0;
}
inline ::int32_t CalcRequest::a() const {
  // @@protoc_insertion_point(field_get:fixbug.CalcRequest.a)
  return _internal_a();
}
inline void CalcRequest::set_a(::int32_t value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:fixbug.CalcRequest.a)
}
inline ::int32_t CalcRequest::_internal_a() const {
  return _impl_.a_;
}
inline void CalcRequest::_internal_set_a(::int32_t value) {
  ;
  _impl_.a_ = value;
}

// int32 b = 2;
inline void CalcRequest::clear_b() {
  _impl_.b_ = 0;
}
inline ::int32_t CalcRequest::b() const {
  // @@protoc_insertion_point(field_get:fixbug.CalcRequest.b)
  return _internal_b();
}
inline void CalcRequest::set_b(::int32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:fixbug.CalcRequest.b)
}
inline ::int32_t CalcRequest::_internal_b() const {
  return _impl_.b_;
}
inline void CalcRequest::_internal_set_b(::int32_t value) {
  ;
  _impl_.b_ = value;
}

// -------------------------------------------------------------------

// CalcResponse

// int32 res = 1;
inline void CalcResponse::clear_res() {
  _impl_.res_ = 0;
}
inline ::int32_t CalcResponse::res() const {
  // @@protoc_insertion_point(field_get:fixbug.CalcResponse.res)
  return _internal_res();
}
inline void CalcResponse::set_res(::int32_t value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:fixbug.CalcResponse.res)
}
inline ::int32_t CalcResponse::_internal_res() const {
  return _impl_.res_;
}
inline void CalcResponse::_internal_set_res(::int32_t value) {
  ;
  _impl_.res_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace fixbug


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::fixbug::Error_ErrorCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fixbug::Error_ErrorCode>() {
  return ::fixbug::Error_ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_test_2eproto_2epb_2eh
